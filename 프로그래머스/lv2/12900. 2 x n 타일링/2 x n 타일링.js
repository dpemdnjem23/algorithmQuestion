// //top down 방식 효율성 문제
// function solution(n) {
//     var answer = 0;
    
    
//     //2*n타일링 
//     //4일경우 5
    
//     //3일경우
//     //ㅁㅁㅁ
//     //ㅁㅁㅁ 3일경우 3가지 1) 세로로 3개 배치 2) 1개 세로로 2개 가로로 1개
//     //3) 가로 1개 세로 2개
    
//     //ㅁㅁ
//     //ㅁㅁ 2일경우 2 가지 1) 먼저 세로로 배치한다 2) 가로로 2개 눕혀서 배치
    
    
    
//     //ㅁ
//     //ㅁ n=1 일경우 1 타일을 세로로 배치하는경우 단 1가지이다.
    
//     //0일경우 0
    
//     //위와같은 규칙을따르는 것을 피보나치 수열이라한다
    
    
//     const dp = [0,1,2,3,5]  //-> 피보나치수열
    
//     const num = 1000000007;
    
//     const fib = (a) =>{
//            // console.log(dp)
//         if(dp[a]!==undefined){
//             return dp[a]
//         }
      
//         dp[a] = (fib(a-1)+fib(a-2) )%num
        
        
       
//         return dp[a]
        
        
//     }
    
//     return fib(n)
    
    
    
    
// }
//bottom up 방식

function solution(n) {
    var answer = 0;
    
    
    //2*n타일링 
    //4일경우 5
    
    //3일경우
    //ㅁㅁㅁ
    //ㅁㅁㅁ 3일경우 3가지 1) 세로로 3개 배치 2) 1개 세로로 2개 가로로 1개
    //3) 가로 1개 세로 2개
    
    //ㅁㅁ
    //ㅁㅁ 2일경우 2 가지 1) 먼저 세로로 배치한다 2) 가로로 2개 눕혀서 배치    
    //ㅁ
    //ㅁ n=1 일경우 1 타일을 세로로 배치하는경우 단 1가지이다.
    
    //0일경우 0
    
    //위와같은 규칙을따르는 것을 피보나치 수열이라한다
    
    
    const dp = []  //-> 피보나치수열
    dp.push(0,1,2)
    const num = 1000000007;
    
   
    for(let i = 3; i<=n;i++){
    dp[i] = (dp[i-1]+dp[i-2] )%num

        
    }
             
        return dp[n]%num
    

}